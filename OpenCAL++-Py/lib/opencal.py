# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_opencal', [dirname(__file__)])
        except ImportError:
            import _opencal
            return _opencal
        if fp is not None:
            try:
                _mod = imp.load_module('_opencal', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _opencal = swig_import_helper()
    del swig_import_helper
else:
    import _opencal
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



_opencal.CAL_FALSE_swigconstant(_opencal)
CAL_FALSE = _opencal.CAL_FALSE

_opencal.CAL_TRUE_swigconstant(_opencal)
CAL_TRUE = _opencal.CAL_TRUE

_opencal.CAL_SPACE_FLAT_swigconstant(_opencal)
CAL_SPACE_FLAT = _opencal.CAL_SPACE_FLAT

_opencal.CAL_SPACE_TOROIDAL_swigconstant(_opencal)
CAL_SPACE_TOROIDAL = _opencal.CAL_SPACE_TOROIDAL

_opencal.CAL_UPDATE_EXPLICIT_swigconstant(_opencal)
CAL_UPDATE_EXPLICIT = _opencal.CAL_UPDATE_EXPLICIT

_opencal.CAL_UPDATE_IMPLICIT_swigconstant(_opencal)
CAL_UPDATE_IMPLICIT = _opencal.CAL_UPDATE_IMPLICIT

_opencal.CAL_NO_OPT_swigconstant(_opencal)
CAL_NO_OPT = _opencal.CAL_NO_OPT

_opencal.CAL_OPT_ACTIVE_CELLS_swigconstant(_opencal)
CAL_OPT_ACTIVE_CELLS = _opencal.CAL_OPT_ACTIVE_CELLS
class CALCell2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALCell2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALCell2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _opencal.CALCell2D_i_set
    __swig_getmethods__["i"] = _opencal.CALCell2D_i_get
    if _newclass:
        i = _swig_property(_opencal.CALCell2D_i_get, _opencal.CALCell2D_i_set)
    __swig_setmethods__["j"] = _opencal.CALCell2D_j_set
    __swig_getmethods__["j"] = _opencal.CALCell2D_j_get
    if _newclass:
        j = _swig_property(_opencal.CALCell2D_j_get, _opencal.CALCell2D_j_set)

    def __init__(self):
        this = _opencal.new_CALCell2D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALCell2D
    __del__ = lambda self: None
CALCell2D_swigregister = _opencal.CALCell2D_swigregister
CALCell2D_swigregister(CALCell2D)

class CALCell3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALCell3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALCell3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _opencal.CALCell3D_i_set
    __swig_getmethods__["i"] = _opencal.CALCell3D_i_get
    if _newclass:
        i = _swig_property(_opencal.CALCell3D_i_get, _opencal.CALCell3D_i_set)
    __swig_setmethods__["j"] = _opencal.CALCell3D_j_set
    __swig_getmethods__["j"] = _opencal.CALCell3D_j_get
    if _newclass:
        j = _swig_property(_opencal.CALCell3D_j_get, _opencal.CALCell3D_j_set)
    __swig_setmethods__["k"] = _opencal.CALCell3D_k_set
    __swig_getmethods__["k"] = _opencal.CALCell3D_k_get
    if _newclass:
        k = _swig_property(_opencal.CALCell3D_k_get, _opencal.CALCell3D_k_set)

    def __init__(self):
        this = _opencal.new_CALCell3D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALCell3D
    __del__ = lambda self: None
CALCell3D_swigregister = _opencal.CALCell3D_swigregister
CALCell3D_swigregister(CALCell3D)

class CALSubstate2Db(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate2Db, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate2Db, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate2Db_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate2Db_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate2Db_current_get, _opencal.CALSubstate2Db_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate2Db_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate2Db_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate2Db_next_get, _opencal.CALSubstate2Db_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate2Db()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate2Db
    __del__ = lambda self: None
CALSubstate2Db_swigregister = _opencal.CALSubstate2Db_swigregister
CALSubstate2Db_swigregister(CALSubstate2Db)

class CALSubstate2Di(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate2Di, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate2Di, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate2Di_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate2Di_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate2Di_current_get, _opencal.CALSubstate2Di_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate2Di_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate2Di_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate2Di_next_get, _opencal.CALSubstate2Di_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate2Di()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate2Di
    __del__ = lambda self: None
CALSubstate2Di_swigregister = _opencal.CALSubstate2Di_swigregister
CALSubstate2Di_swigregister(CALSubstate2Di)

class CALSubstate2Dr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate2Dr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate2Dr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate2Dr_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate2Dr_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate2Dr_current_get, _opencal.CALSubstate2Dr_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate2Dr_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate2Dr_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate2Dr_next_get, _opencal.CALSubstate2Dr_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate2Dr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate2Dr
    __del__ = lambda self: None
CALSubstate2Dr_swigregister = _opencal.CALSubstate2Dr_swigregister
CALSubstate2Dr_swigregister(CALSubstate2Dr)

class CALSubstate3Db(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate3Db, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate3Db, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate3Db_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate3Db_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate3Db_current_get, _opencal.CALSubstate3Db_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate3Db_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate3Db_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate3Db_next_get, _opencal.CALSubstate3Db_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate3Db()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate3Db
    __del__ = lambda self: None
CALSubstate3Db_swigregister = _opencal.CALSubstate3Db_swigregister
CALSubstate3Db_swigregister(CALSubstate3Db)

class CALSubstate3Di(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate3Di, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate3Di, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate3Di_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate3Di_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate3Di_current_get, _opencal.CALSubstate3Di_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate3Di_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate3Di_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate3Di_next_get, _opencal.CALSubstate3Di_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate3Di()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate3Di
    __del__ = lambda self: None
CALSubstate3Di_swigregister = _opencal.CALSubstate3Di_swigregister
CALSubstate3Di_swigregister(CALSubstate3Di)

class CALSubstate3Dr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALSubstate3Dr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALSubstate3Dr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _opencal.CALSubstate3Dr_current_set
    __swig_getmethods__["current"] = _opencal.CALSubstate3Dr_current_get
    if _newclass:
        current = _swig_property(_opencal.CALSubstate3Dr_current_get, _opencal.CALSubstate3Dr_current_set)
    __swig_setmethods__["next"] = _opencal.CALSubstate3Dr_next_set
    __swig_getmethods__["next"] = _opencal.CALSubstate3Dr_next_get
    if _newclass:
        next = _swig_property(_opencal.CALSubstate3Dr_next_get, _opencal.CALSubstate3Dr_next_set)

    def __init__(self):
        this = _opencal.new_CALSubstate3Dr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALSubstate3Dr
    __del__ = lambda self: None
CALSubstate3Dr_swigregister = _opencal.CALSubstate3Dr_swigregister
CALSubstate3Dr_swigregister(CALSubstate3Dr)


_opencal.CAL_RUN_LOOP_swigconstant(_opencal)
CAL_RUN_LOOP = _opencal.CAL_RUN_LOOP

_opencal.REDUCTION_NONE_swigconstant(_opencal)
REDUCTION_NONE = _opencal.REDUCTION_NONE

_opencal.REDUCTION_MAX_swigconstant(_opencal)
REDUCTION_MAX = _opencal.REDUCTION_MAX

_opencal.REDUCTION_MIN_swigconstant(_opencal)
REDUCTION_MIN = _opencal.REDUCTION_MIN

_opencal.REDUCTION_SUM_swigconstant(_opencal)
REDUCTION_SUM = _opencal.REDUCTION_SUM

_opencal.REDUCTION_PROD_swigconstant(_opencal)
REDUCTION_PROD = _opencal.REDUCTION_PROD

_opencal.REDUCTION_LOGICAL_AND_swigconstant(_opencal)
REDUCTION_LOGICAL_AND = _opencal.REDUCTION_LOGICAL_AND

_opencal.REDUCTION_BINARY_AND_swigconstant(_opencal)
REDUCTION_BINARY_AND = _opencal.REDUCTION_BINARY_AND

_opencal.REDUCTION_LOGICAL_OR_swigconstant(_opencal)
REDUCTION_LOGICAL_OR = _opencal.REDUCTION_LOGICAL_OR

_opencal.REDUCTION_BINARY_OR_swigconstant(_opencal)
REDUCTION_BINARY_OR = _opencal.REDUCTION_BINARY_OR

_opencal.REDUCTION_LOGICAL_XOR_swigconstant(_opencal)
REDUCTION_LOGICAL_XOR = _opencal.REDUCTION_LOGICAL_XOR

_opencal.REDUCTION_BINARY_XOR_swigconstant(_opencal)
REDUCTION_BINARY_XOR = _opencal.REDUCTION_BINARY_XOR

def calAllocBuffer2Db(rows, columns):
    return _opencal.calAllocBuffer2Db(rows, columns)
calAllocBuffer2Db = _opencal.calAllocBuffer2Db

def calAllocBuffer2Di(rows, columns):
    return _opencal.calAllocBuffer2Di(rows, columns)
calAllocBuffer2Di = _opencal.calAllocBuffer2Di

def calAllocBuffer2Dr(rows, columns):
    return _opencal.calAllocBuffer2Dr(rows, columns)
calAllocBuffer2Dr = _opencal.calAllocBuffer2Dr

def calDeleteBuffer2Db(M):
    return _opencal.calDeleteBuffer2Db(M)
calDeleteBuffer2Db = _opencal.calDeleteBuffer2Db

def calDeleteBuffer2Di(M):
    return _opencal.calDeleteBuffer2Di(M)
calDeleteBuffer2Di = _opencal.calDeleteBuffer2Di

def calDeleteBuffer2Dr(M):
    return _opencal.calDeleteBuffer2Dr(M)
calDeleteBuffer2Dr = _opencal.calDeleteBuffer2Dr

def calCopyBuffer2Db(M_src, M_dest, rows, columns):
    return _opencal.calCopyBuffer2Db(M_src, M_dest, rows, columns)
calCopyBuffer2Db = _opencal.calCopyBuffer2Db

def calCopyBuffer2Di(M_src, M_dest, rows, columns):
    return _opencal.calCopyBuffer2Di(M_src, M_dest, rows, columns)
calCopyBuffer2Di = _opencal.calCopyBuffer2Di

def calCopyBuffer2Dr(M_src, M_dest, rows, columns):
    return _opencal.calCopyBuffer2Dr(M_src, M_dest, rows, columns)
calCopyBuffer2Dr = _opencal.calCopyBuffer2Dr

def calCopyActiveCellsBuffer2Db(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells):
    return _opencal.calCopyActiveCellsBuffer2Db(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells)
calCopyActiveCellsBuffer2Db = _opencal.calCopyActiveCellsBuffer2Db

def calCopyActiveCellsBuffer2Di(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells):
    return _opencal.calCopyActiveCellsBuffer2Di(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells)
calCopyActiveCellsBuffer2Di = _opencal.calCopyActiveCellsBuffer2Di

def calCopyActiveCellsBuffer2Dr(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells):
    return _opencal.calCopyActiveCellsBuffer2Dr(M_src, M_dest, rows, columns, active_cells, sizeof_active_cells)
calCopyActiveCellsBuffer2Dr = _opencal.calCopyActiveCellsBuffer2Dr

def calAddBuffer2Db(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calAddBuffer2Db(M_op1, M_op2, M_dest, rows, columns)
calAddBuffer2Db = _opencal.calAddBuffer2Db

def calAddBuffer2Di(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calAddBuffer2Di(M_op1, M_op2, M_dest, rows, columns)
calAddBuffer2Di = _opencal.calAddBuffer2Di

def calAddBuffer2Dr(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calAddBuffer2Dr(M_op1, M_op2, M_dest, rows, columns)
calAddBuffer2Dr = _opencal.calAddBuffer2Dr

def calSubtractBuffer2Db(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calSubtractBuffer2Db(M_op1, M_op2, M_dest, rows, columns)
calSubtractBuffer2Db = _opencal.calSubtractBuffer2Db

def calSubtractBuffer2Di(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calSubtractBuffer2Di(M_op1, M_op2, M_dest, rows, columns)
calSubtractBuffer2Di = _opencal.calSubtractBuffer2Di

def calSubtractBuffer2Dr(M_op1, M_op2, M_dest, rows, columns):
    return _opencal.calSubtractBuffer2Dr(M_op1, M_op2, M_dest, rows, columns)
calSubtractBuffer2Dr = _opencal.calSubtractBuffer2Dr

def calSetBuffer2Db(M, rows, columns, value):
    return _opencal.calSetBuffer2Db(M, rows, columns, value)
calSetBuffer2Db = _opencal.calSetBuffer2Db

def calSetBuffer2Di(M, rows, columns, value):
    return _opencal.calSetBuffer2Di(M, rows, columns, value)
calSetBuffer2Di = _opencal.calSetBuffer2Di

def calSetBuffer2Dr(M, rows, columns, value):
    return _opencal.calSetBuffer2Dr(M, rows, columns, value)
calSetBuffer2Dr = _opencal.calSetBuffer2Dr

def calSetActiveCellsBuffer2Db(M, rows, columns, value, active_cells, sizeof_active_cells):
    return _opencal.calSetActiveCellsBuffer2Db(M, rows, columns, value, active_cells, sizeof_active_cells)
calSetActiveCellsBuffer2Db = _opencal.calSetActiveCellsBuffer2Db

def calSetActiveCellsBuffer2Di(M, rows, columns, value, active_cells, sizeof_active_cells):
    return _opencal.calSetActiveCellsBuffer2Di(M, rows, columns, value, active_cells, sizeof_active_cells)
calSetActiveCellsBuffer2Di = _opencal.calSetActiveCellsBuffer2Di

def calSetActiveCellsBuffer2Dr(M, rows, columns, value, active_cells, sizeof_active_cells):
    return _opencal.calSetActiveCellsBuffer2Dr(M, rows, columns, value, active_cells, sizeof_active_cells)
calSetActiveCellsBuffer2Dr = _opencal.calSetActiveCellsBuffer2Dr

def calfLoadMatrix2Db(M, rows, columns, f):
    return _opencal.calfLoadMatrix2Db(M, rows, columns, f)
calfLoadMatrix2Db = _opencal.calfLoadMatrix2Db

def calfLoadMatrix2Di(M, rows, columns, f):
    return _opencal.calfLoadMatrix2Di(M, rows, columns, f)
calfLoadMatrix2Di = _opencal.calfLoadMatrix2Di

def calfLoadMatrix2Dr(M, rows, columns, f):
    return _opencal.calfLoadMatrix2Dr(M, rows, columns, f)
calfLoadMatrix2Dr = _opencal.calfLoadMatrix2Dr

def calLoadMatrix2Db(M, rows, columns, path):
    return _opencal.calLoadMatrix2Db(M, rows, columns, path)
calLoadMatrix2Db = _opencal.calLoadMatrix2Db

def calLoadMatrix2Di(M, rows, columns, path):
    return _opencal.calLoadMatrix2Di(M, rows, columns, path)
calLoadMatrix2Di = _opencal.calLoadMatrix2Di

def calLoadMatrix2Dr(M, rows, columns, path):
    return _opencal.calLoadMatrix2Dr(M, rows, columns, path)
calLoadMatrix2Dr = _opencal.calLoadMatrix2Dr

def calfSaveMatrix2Db(M, rows, columns, f):
    return _opencal.calfSaveMatrix2Db(M, rows, columns, f)
calfSaveMatrix2Db = _opencal.calfSaveMatrix2Db

def calfSaveMatrix2Di(M, rows, columns, f):
    return _opencal.calfSaveMatrix2Di(M, rows, columns, f)
calfSaveMatrix2Di = _opencal.calfSaveMatrix2Di

def calfSaveMatrix2Dr(M, rows, columns, f):
    return _opencal.calfSaveMatrix2Dr(M, rows, columns, f)
calfSaveMatrix2Dr = _opencal.calfSaveMatrix2Dr

def calSaveMatrix2Db(M, rows, columns, path):
    return _opencal.calSaveMatrix2Db(M, rows, columns, path)
calSaveMatrix2Db = _opencal.calSaveMatrix2Db

def calSaveMatrix2Di(M, rows, columns, path):
    return _opencal.calSaveMatrix2Di(M, rows, columns, path)
calSaveMatrix2Di = _opencal.calSaveMatrix2Di

def calSaveMatrix2Dr(M, rows, columns, path):
    return _opencal.calSaveMatrix2Dr(M, rows, columns, path)
calSaveMatrix2Dr = _opencal.calSaveMatrix2Dr

def calReductionComputeMax2Db(model, substate):
    return _opencal.calReductionComputeMax2Db(model, substate)
calReductionComputeMax2Db = _opencal.calReductionComputeMax2Db

def calReductionComputeMax2Di(model, substate):
    return _opencal.calReductionComputeMax2Di(model, substate)
calReductionComputeMax2Di = _opencal.calReductionComputeMax2Di

def calReductionComputeMax2Dr(model, substate):
    return _opencal.calReductionComputeMax2Dr(model, substate)
calReductionComputeMax2Dr = _opencal.calReductionComputeMax2Dr

def calReductionComputeMin2Db(model, substate):
    return _opencal.calReductionComputeMin2Db(model, substate)
calReductionComputeMin2Db = _opencal.calReductionComputeMin2Db

def calReductionComputeMin2Di(model, substate):
    return _opencal.calReductionComputeMin2Di(model, substate)
calReductionComputeMin2Di = _opencal.calReductionComputeMin2Di

def calReductionComputeMin2Dr(model, substate):
    return _opencal.calReductionComputeMin2Dr(model, substate)
calReductionComputeMin2Dr = _opencal.calReductionComputeMin2Dr

def calReductionComputeSum2Db(model, substate):
    return _opencal.calReductionComputeSum2Db(model, substate)
calReductionComputeSum2Db = _opencal.calReductionComputeSum2Db

def calReductionComputeSum2Di(model, substate):
    return _opencal.calReductionComputeSum2Di(model, substate)
calReductionComputeSum2Di = _opencal.calReductionComputeSum2Di

def calReductionComputeSum2Dr(model, substate):
    return _opencal.calReductionComputeSum2Dr(model, substate)
calReductionComputeSum2Dr = _opencal.calReductionComputeSum2Dr

def calReductionComputeProd2Db(model, substate):
    return _opencal.calReductionComputeProd2Db(model, substate)
calReductionComputeProd2Db = _opencal.calReductionComputeProd2Db

def calReductionComputeProd2Di(model, substate):
    return _opencal.calReductionComputeProd2Di(model, substate)
calReductionComputeProd2Di = _opencal.calReductionComputeProd2Di

def calReductionComputeProd2Dr(model, substate):
    return _opencal.calReductionComputeProd2Dr(model, substate)
calReductionComputeProd2Dr = _opencal.calReductionComputeProd2Dr

def calReductionComputeLogicalAnd2Db(model, substate):
    return _opencal.calReductionComputeLogicalAnd2Db(model, substate)
calReductionComputeLogicalAnd2Db = _opencal.calReductionComputeLogicalAnd2Db

def calReductionComputeLogicalAnd2Di(model, substate):
    return _opencal.calReductionComputeLogicalAnd2Di(model, substate)
calReductionComputeLogicalAnd2Di = _opencal.calReductionComputeLogicalAnd2Di

def calReductionComputeLogicalAnd2Dr(model, substate):
    return _opencal.calReductionComputeLogicalAnd2Dr(model, substate)
calReductionComputeLogicalAnd2Dr = _opencal.calReductionComputeLogicalAnd2Dr

def calReductionComputeBinaryAnd2Db(model, substate):
    return _opencal.calReductionComputeBinaryAnd2Db(model, substate)
calReductionComputeBinaryAnd2Db = _opencal.calReductionComputeBinaryAnd2Db

def calReductionComputeBinaryAnd2Di(model, substate):
    return _opencal.calReductionComputeBinaryAnd2Di(model, substate)
calReductionComputeBinaryAnd2Di = _opencal.calReductionComputeBinaryAnd2Di

def calReductionComputeBinaryAnd2Dr(model, substate):
    return _opencal.calReductionComputeBinaryAnd2Dr(model, substate)
calReductionComputeBinaryAnd2Dr = _opencal.calReductionComputeBinaryAnd2Dr

def calReductionComputeLogicalOr2Db(model, substate):
    return _opencal.calReductionComputeLogicalOr2Db(model, substate)
calReductionComputeLogicalOr2Db = _opencal.calReductionComputeLogicalOr2Db

def calReductionComputeLogicalOr2Di(model, substate):
    return _opencal.calReductionComputeLogicalOr2Di(model, substate)
calReductionComputeLogicalOr2Di = _opencal.calReductionComputeLogicalOr2Di

def calReductionComputeLogicalOr2Dr(model, substate):
    return _opencal.calReductionComputeLogicalOr2Dr(model, substate)
calReductionComputeLogicalOr2Dr = _opencal.calReductionComputeLogicalOr2Dr

def calReductionComputeBinaryOr2Db(model, substate):
    return _opencal.calReductionComputeBinaryOr2Db(model, substate)
calReductionComputeBinaryOr2Db = _opencal.calReductionComputeBinaryOr2Db

def calReductionComputeBinaryOr2Di(model, substate):
    return _opencal.calReductionComputeBinaryOr2Di(model, substate)
calReductionComputeBinaryOr2Di = _opencal.calReductionComputeBinaryOr2Di

def calReductionComputeBinaryOr2Dr(model, substate):
    return _opencal.calReductionComputeBinaryOr2Dr(model, substate)
calReductionComputeBinaryOr2Dr = _opencal.calReductionComputeBinaryOr2Dr

def calReductionComputeLogicalXor2Db(model, substate):
    return _opencal.calReductionComputeLogicalXor2Db(model, substate)
calReductionComputeLogicalXor2Db = _opencal.calReductionComputeLogicalXor2Db

def calReductionComputeLogicalXor2Di(model, substate):
    return _opencal.calReductionComputeLogicalXor2Di(model, substate)
calReductionComputeLogicalXor2Di = _opencal.calReductionComputeLogicalXor2Di

def calReductionComputeLogicalXor2Dr(model, substate):
    return _opencal.calReductionComputeLogicalXor2Dr(model, substate)
calReductionComputeLogicalXor2Dr = _opencal.calReductionComputeLogicalXor2Dr

def calReductionComputeBinaryXor2Db(model, substate):
    return _opencal.calReductionComputeBinaryXor2Db(model, substate)
calReductionComputeBinaryXor2Db = _opencal.calReductionComputeBinaryXor2Db

def calReductionComputeBinaryXor2Di(model, substate):
    return _opencal.calReductionComputeBinaryXor2Di(model, substate)
calReductionComputeBinaryXor2Di = _opencal.calReductionComputeBinaryXor2Di

def calReductionComputeBinaryXor2Dr(model, substate):
    return _opencal.calReductionComputeBinaryXor2Dr(model, substate)
calReductionComputeBinaryXor2Dr = _opencal.calReductionComputeBinaryXor2Dr

def calReductionOperation2Db(model, substate, operation):
    return _opencal.calReductionOperation2Db(model, substate, operation)
calReductionOperation2Db = _opencal.calReductionOperation2Db

def calReductionOperation2Di(model, substate, operation):
    return _opencal.calReductionOperation2Di(model, substate, operation)
calReductionOperation2Di = _opencal.calReductionOperation2Di

def calReductionOperation2Dr(model, substate, operation):
    return _opencal.calReductionOperation2Dr(model, substate, operation)
calReductionOperation2Dr = _opencal.calReductionOperation2Dr

def getValue2DbAtIndex(substate, index):
    return _opencal.getValue2DbAtIndex(substate, index)
getValue2DbAtIndex = _opencal.getValue2DbAtIndex

def getValue2DiAtIndex(substate, index):
    return _opencal.getValue2DiAtIndex(substate, index)
getValue2DiAtIndex = _opencal.getValue2DiAtIndex

def getValue2DrAtIndex(substate, index):
    return _opencal.getValue2DrAtIndex(substate, index)
getValue2DrAtIndex = _opencal.getValue2DrAtIndex

def calInitX2Db(ca2D, Q, i, j, n, value):
    return _opencal.calInitX2Db(ca2D, Q, i, j, n, value)
calInitX2Db = _opencal.calInitX2Db

def calInitX2Di(ca2D, Q, i, j, n, value):
    return _opencal.calInitX2Di(ca2D, Q, i, j, n, value)
calInitX2Di = _opencal.calInitX2Di

def calInitX2Dr(ca2D, Q, i, j, n, value):
    return _opencal.calInitX2Dr(ca2D, Q, i, j, n, value)
calInitX2Dr = _opencal.calInitX2Dr

def calGetNext2Db(ca2D, Q, i, j):
    return _opencal.calGetNext2Db(ca2D, Q, i, j)
calGetNext2Db = _opencal.calGetNext2Db

def calGetNext2Di(ca2D, Q, i, j):
    return _opencal.calGetNext2Di(ca2D, Q, i, j)
calGetNext2Di = _opencal.calGetNext2Di

def calGetNext2Dr(ca2D, Q, i, j):
    return _opencal.calGetNext2Dr(ca2D, Q, i, j)
calGetNext2Dr = _opencal.calGetNext2Dr

def calGetNextX2Db(ca2D, Q, i, j, n):
    return _opencal.calGetNextX2Db(ca2D, Q, i, j, n)
calGetNextX2Db = _opencal.calGetNextX2Db

def calGetNextX2Di(ca2D, Q, i, j, n):
    return _opencal.calGetNextX2Di(ca2D, Q, i, j, n)
calGetNextX2Di = _opencal.calGetNextX2Di

def calGetNextX2Dr(ca2D, Q, i, j, n):
    return _opencal.calGetNextX2Dr(ca2D, Q, i, j, n)
calGetNextX2Dr = _opencal.calGetNextX2Dr

def calSetX2Db(ca2D, Q, i, j, n, value):
    return _opencal.calSetX2Db(ca2D, Q, i, j, n, value)
calSetX2Db = _opencal.calSetX2Db

def calSetX2Di(ca2D, Q, i, j, n, value):
    return _opencal.calSetX2Di(ca2D, Q, i, j, n, value)
calSetX2Di = _opencal.calSetX2Di

def calSetX2Dr(ca2D, Q, i, j, n, value):
    return _opencal.calSetX2Dr(ca2D, Q, i, j, n, value)
calSetX2Dr = _opencal.calSetX2Dr

def calSetCurrentX2Db(ca2D, Q, i, j, n, value):
    return _opencal.calSetCurrentX2Db(ca2D, Q, i, j, n, value)
calSetCurrentX2Db = _opencal.calSetCurrentX2Db

def calSetCurrentX2Di(ca2D, Q, i, j, n, value):
    return _opencal.calSetCurrentX2Di(ca2D, Q, i, j, n, value)
calSetCurrentX2Di = _opencal.calSetCurrentX2Di

def calSetCurrentX2Dr(ca2D, Q, i, j, n, value):
    return _opencal.calSetCurrentX2Dr(ca2D, Q, i, j, n, value)
calSetCurrentX2Dr = _opencal.calSetCurrentX2Dr

def calfLoadSubstate2Db(ca2D, Q, f):
    return _opencal.calfLoadSubstate2Db(ca2D, Q, f)
calfLoadSubstate2Db = _opencal.calfLoadSubstate2Db

def calfLoadSubstate2Di(ca2D, Q, f):
    return _opencal.calfLoadSubstate2Di(ca2D, Q, f)
calfLoadSubstate2Di = _opencal.calfLoadSubstate2Di

def calfLoadSubstate2Dr(ca2D, Q, f):
    return _opencal.calfLoadSubstate2Dr(ca2D, Q, f)
calfLoadSubstate2Dr = _opencal.calfLoadSubstate2Dr

def calLoadSubstate2Db(ca2D, Q, path):
    return _opencal.calLoadSubstate2Db(ca2D, Q, path)
calLoadSubstate2Db = _opencal.calLoadSubstate2Db

def calLoadSubstate2Di(ca2D, Q, path):
    return _opencal.calLoadSubstate2Di(ca2D, Q, path)
calLoadSubstate2Di = _opencal.calLoadSubstate2Di

def calLoadSubstate2Dr(ca2D, Q, path):
    return _opencal.calLoadSubstate2Dr(ca2D, Q, path)
calLoadSubstate2Dr = _opencal.calLoadSubstate2Dr

def calfSaveSubstate2Db(ca2D, Q, f):
    return _opencal.calfSaveSubstate2Db(ca2D, Q, f)
calfSaveSubstate2Db = _opencal.calfSaveSubstate2Db

def calfSaveSubstate2Di(ca2D, Q, f):
    return _opencal.calfSaveSubstate2Di(ca2D, Q, f)
calfSaveSubstate2Di = _opencal.calfSaveSubstate2Di

def calfSaveSubstate2Dr(ca2D, Q, f):
    return _opencal.calfSaveSubstate2Dr(ca2D, Q, f)
calfSaveSubstate2Dr = _opencal.calfSaveSubstate2Dr

def calSaveSubstate2Db(ca2D, Q, path):
    return _opencal.calSaveSubstate2Db(ca2D, Q, path)
calSaveSubstate2Db = _opencal.calSaveSubstate2Db

def calSaveSubstate2Di(ca2D, Q, path):
    return _opencal.calSaveSubstate2Di(ca2D, Q, path)
calSaveSubstate2Di = _opencal.calSaveSubstate2Di

def calSaveSubstate2Dr(ca2D, Q, path):
    return _opencal.calSaveSubstate2Dr(ca2D, Q, path)
calSaveSubstate2Dr = _opencal.calSaveSubstate2Dr

_opencal.CAL_CUSTOM_NEIGHBORHOOD_2D_swigconstant(_opencal)
CAL_CUSTOM_NEIGHBORHOOD_2D = _opencal.CAL_CUSTOM_NEIGHBORHOOD_2D

_opencal.CAL_VON_NEUMANN_NEIGHBORHOOD_2D_swigconstant(_opencal)
CAL_VON_NEUMANN_NEIGHBORHOOD_2D = _opencal.CAL_VON_NEUMANN_NEIGHBORHOOD_2D

_opencal.CAL_MOORE_NEIGHBORHOOD_2D_swigconstant(_opencal)
CAL_MOORE_NEIGHBORHOOD_2D = _opencal.CAL_MOORE_NEIGHBORHOOD_2D

_opencal.CAL_HEXAGONAL_NEIGHBORHOOD_2D_swigconstant(_opencal)
CAL_HEXAGONAL_NEIGHBORHOOD_2D = _opencal.CAL_HEXAGONAL_NEIGHBORHOOD_2D

_opencal.CAL_HEXAGONAL_NEIGHBORHOOD_ALT_2D_swigconstant(_opencal)
CAL_HEXAGONAL_NEIGHBORHOOD_ALT_2D = _opencal.CAL_HEXAGONAL_NEIGHBORHOOD_ALT_2D

_opencal.CAL_HEXAGONAL_SHIFT_swigconstant(_opencal)
CAL_HEXAGONAL_SHIFT = _opencal.CAL_HEXAGONAL_SHIFT
class CALActiveCells2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALActiveCells2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALActiveCells2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _opencal.CALActiveCells2D_flags_set
    __swig_getmethods__["flags"] = _opencal.CALActiveCells2D_flags_get
    if _newclass:
        flags = _swig_property(_opencal.CALActiveCells2D_flags_get, _opencal.CALActiveCells2D_flags_set)
    __swig_setmethods__["size_next"] = _opencal.CALActiveCells2D_size_next_set
    __swig_getmethods__["size_next"] = _opencal.CALActiveCells2D_size_next_get
    if _newclass:
        size_next = _swig_property(_opencal.CALActiveCells2D_size_next_get, _opencal.CALActiveCells2D_size_next_set)
    __swig_setmethods__["cells"] = _opencal.CALActiveCells2D_cells_set
    __swig_getmethods__["cells"] = _opencal.CALActiveCells2D_cells_get
    if _newclass:
        cells = _swig_property(_opencal.CALActiveCells2D_cells_get, _opencal.CALActiveCells2D_cells_set)
    __swig_setmethods__["size_current"] = _opencal.CALActiveCells2D_size_current_set
    __swig_getmethods__["size_current"] = _opencal.CALActiveCells2D_size_current_get
    if _newclass:
        size_current = _swig_property(_opencal.CALActiveCells2D_size_current_get, _opencal.CALActiveCells2D_size_current_set)

    def __init__(self):
        this = _opencal.new_CALActiveCells2D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALActiveCells2D
    __del__ = lambda self: None
CALActiveCells2D_swigregister = _opencal.CALActiveCells2D_swigregister
CALActiveCells2D_swigregister(CALActiveCells2D)

class CALModel2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALModel2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALModel2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _opencal.CALModel2D_rows_set
    __swig_getmethods__["rows"] = _opencal.CALModel2D_rows_get
    if _newclass:
        rows = _swig_property(_opencal.CALModel2D_rows_get, _opencal.CALModel2D_rows_set)
    __swig_setmethods__["columns"] = _opencal.CALModel2D_columns_set
    __swig_getmethods__["columns"] = _opencal.CALModel2D_columns_get
    if _newclass:
        columns = _swig_property(_opencal.CALModel2D_columns_get, _opencal.CALModel2D_columns_set)
    __swig_setmethods__["T"] = _opencal.CALModel2D_T_set
    __swig_getmethods__["T"] = _opencal.CALModel2D_T_get
    if _newclass:
        T = _swig_property(_opencal.CALModel2D_T_get, _opencal.CALModel2D_T_set)
    __swig_setmethods__["OPTIMIZATION"] = _opencal.CALModel2D_OPTIMIZATION_set
    __swig_getmethods__["OPTIMIZATION"] = _opencal.CALModel2D_OPTIMIZATION_get
    if _newclass:
        OPTIMIZATION = _swig_property(_opencal.CALModel2D_OPTIMIZATION_get, _opencal.CALModel2D_OPTIMIZATION_set)
    __swig_setmethods__["A"] = _opencal.CALModel2D_A_set
    __swig_getmethods__["A"] = _opencal.CALModel2D_A_get
    if _newclass:
        A = _swig_property(_opencal.CALModel2D_A_get, _opencal.CALModel2D_A_set)
    __swig_setmethods__["X"] = _opencal.CALModel2D_X_set
    __swig_getmethods__["X"] = _opencal.CALModel2D_X_get
    if _newclass:
        X = _swig_property(_opencal.CALModel2D_X_get, _opencal.CALModel2D_X_set)
    __swig_setmethods__["sizeof_X"] = _opencal.CALModel2D_sizeof_X_set
    __swig_getmethods__["sizeof_X"] = _opencal.CALModel2D_sizeof_X_get
    if _newclass:
        sizeof_X = _swig_property(_opencal.CALModel2D_sizeof_X_get, _opencal.CALModel2D_sizeof_X_set)
    __swig_setmethods__["X_id"] = _opencal.CALModel2D_X_id_set
    __swig_getmethods__["X_id"] = _opencal.CALModel2D_X_id_get
    if _newclass:
        X_id = _swig_property(_opencal.CALModel2D_X_id_get, _opencal.CALModel2D_X_id_set)
    __swig_setmethods__["pQb_array"] = _opencal.CALModel2D_pQb_array_set
    __swig_getmethods__["pQb_array"] = _opencal.CALModel2D_pQb_array_get
    if _newclass:
        pQb_array = _swig_property(_opencal.CALModel2D_pQb_array_get, _opencal.CALModel2D_pQb_array_set)
    __swig_setmethods__["pQi_array"] = _opencal.CALModel2D_pQi_array_set
    __swig_getmethods__["pQi_array"] = _opencal.CALModel2D_pQi_array_get
    if _newclass:
        pQi_array = _swig_property(_opencal.CALModel2D_pQi_array_get, _opencal.CALModel2D_pQi_array_set)
    __swig_setmethods__["pQr_array"] = _opencal.CALModel2D_pQr_array_set
    __swig_getmethods__["pQr_array"] = _opencal.CALModel2D_pQr_array_get
    if _newclass:
        pQr_array = _swig_property(_opencal.CALModel2D_pQr_array_get, _opencal.CALModel2D_pQr_array_set)
    __swig_setmethods__["sizeof_pQb_array"] = _opencal.CALModel2D_sizeof_pQb_array_set
    __swig_getmethods__["sizeof_pQb_array"] = _opencal.CALModel2D_sizeof_pQb_array_get
    if _newclass:
        sizeof_pQb_array = _swig_property(_opencal.CALModel2D_sizeof_pQb_array_get, _opencal.CALModel2D_sizeof_pQb_array_set)
    __swig_setmethods__["sizeof_pQi_array"] = _opencal.CALModel2D_sizeof_pQi_array_set
    __swig_getmethods__["sizeof_pQi_array"] = _opencal.CALModel2D_sizeof_pQi_array_get
    if _newclass:
        sizeof_pQi_array = _swig_property(_opencal.CALModel2D_sizeof_pQi_array_get, _opencal.CALModel2D_sizeof_pQi_array_set)
    __swig_setmethods__["sizeof_pQr_array"] = _opencal.CALModel2D_sizeof_pQr_array_set
    __swig_getmethods__["sizeof_pQr_array"] = _opencal.CALModel2D_sizeof_pQr_array_get
    if _newclass:
        sizeof_pQr_array = _swig_property(_opencal.CALModel2D_sizeof_pQr_array_get, _opencal.CALModel2D_sizeof_pQr_array_set)
    __swig_setmethods__["elementary_processes"] = _opencal.CALModel2D_elementary_processes_set
    __swig_getmethods__["elementary_processes"] = _opencal.CALModel2D_elementary_processes_get
    if _newclass:
        elementary_processes = _swig_property(_opencal.CALModel2D_elementary_processes_get, _opencal.CALModel2D_elementary_processes_set)
    __swig_setmethods__["num_of_elementary_processes"] = _opencal.CALModel2D_num_of_elementary_processes_set
    __swig_getmethods__["num_of_elementary_processes"] = _opencal.CALModel2D_num_of_elementary_processes_get
    if _newclass:
        num_of_elementary_processes = _swig_property(_opencal.CALModel2D_num_of_elementary_processes_get, _opencal.CALModel2D_num_of_elementary_processes_set)

    def __init__(self):
        this = _opencal.new_CALModel2D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALModel2D
    __del__ = lambda self: None
CALModel2D_swigregister = _opencal.CALModel2D_swigregister
CALModel2D_swigregister(CALModel2D)


def calCADef2D(rows, columns, CAL_NEIGHBORHOOD_2D, CAL_TOROIDALITY, CAL_OPTIMIZATION):
    return _opencal.calCADef2D(rows, columns, CAL_NEIGHBORHOOD_2D, CAL_TOROIDALITY, CAL_OPTIMIZATION)
calCADef2D = _opencal.calCADef2D

def calAddActiveCell2D(ca2D, i, j):
    return _opencal.calAddActiveCell2D(ca2D, i, j)
calAddActiveCell2D = _opencal.calAddActiveCell2D

def calAddActiveCellX2D(ca2D, i, j, n):
    return _opencal.calAddActiveCellX2D(ca2D, i, j, n)
calAddActiveCellX2D = _opencal.calAddActiveCellX2D

def calRemoveActiveCell2D(ca2D, i, j):
    return _opencal.calRemoveActiveCell2D(ca2D, i, j)
calRemoveActiveCell2D = _opencal.calRemoveActiveCell2D

def calUpdateActiveCells2D(ca2D):
    return _opencal.calUpdateActiveCells2D(ca2D)
calUpdateActiveCells2D = _opencal.calUpdateActiveCells2D

def calAddNeighbor2D(ca2D, i, j):
    return _opencal.calAddNeighbor2D(ca2D, i, j)
calAddNeighbor2D = _opencal.calAddNeighbor2D

def calAddSubstate2Db(ca2D):
    return _opencal.calAddSubstate2Db(ca2D)
calAddSubstate2Db = _opencal.calAddSubstate2Db

def calAddSubstate2Di(ca2D):
    return _opencal.calAddSubstate2Di(ca2D)
calAddSubstate2Di = _opencal.calAddSubstate2Di

def calAddSubstate2Dr(ca2D):
    return _opencal.calAddSubstate2Dr(ca2D)
calAddSubstate2Dr = _opencal.calAddSubstate2Dr

def calAddSingleLayerSubstate2Db(ca2D):
    return _opencal.calAddSingleLayerSubstate2Db(ca2D)
calAddSingleLayerSubstate2Db = _opencal.calAddSingleLayerSubstate2Db

def calAddSingleLayerSubstate2Di(ca2D):
    return _opencal.calAddSingleLayerSubstate2Di(ca2D)
calAddSingleLayerSubstate2Di = _opencal.calAddSingleLayerSubstate2Di

def calAddSingleLayerSubstate2Dr(ca2D):
    return _opencal.calAddSingleLayerSubstate2Dr(ca2D)
calAddSingleLayerSubstate2Dr = _opencal.calAddSingleLayerSubstate2Dr

def calAddElementaryProcess2D(ca2D, elementary_process):
    return _opencal.calAddElementaryProcess2D(ca2D, elementary_process)
calAddElementaryProcess2D = _opencal.calAddElementaryProcess2D

def calInitSubstate2Db(ca2D, Q, value):
    return _opencal.calInitSubstate2Db(ca2D, Q, value)
calInitSubstate2Db = _opencal.calInitSubstate2Db

def calInitSubstate2Di(ca2D, Q, value):
    return _opencal.calInitSubstate2Di(ca2D, Q, value)
calInitSubstate2Di = _opencal.calInitSubstate2Di

def calInitSubstate2Dr(ca2D, Q, value):
    return _opencal.calInitSubstate2Dr(ca2D, Q, value)
calInitSubstate2Dr = _opencal.calInitSubstate2Dr

def calInitSubstateNext2Db(ca2D, Q, value):
    return _opencal.calInitSubstateNext2Db(ca2D, Q, value)
calInitSubstateNext2Db = _opencal.calInitSubstateNext2Db

def calInitSubstateNext2Di(ca2D, Q, value):
    return _opencal.calInitSubstateNext2Di(ca2D, Q, value)
calInitSubstateNext2Di = _opencal.calInitSubstateNext2Di

def calInitSubstateNext2Dr(ca2D, Q, value):
    return _opencal.calInitSubstateNext2Dr(ca2D, Q, value)
calInitSubstateNext2Dr = _opencal.calInitSubstateNext2Dr

def calUpdateSubstate2Db(ca2D, Q):
    return _opencal.calUpdateSubstate2Db(ca2D, Q)
calUpdateSubstate2Db = _opencal.calUpdateSubstate2Db

def calUpdateSubstate2Di(ca2D, Q):
    return _opencal.calUpdateSubstate2Di(ca2D, Q)
calUpdateSubstate2Di = _opencal.calUpdateSubstate2Di

def calUpdateSubstate2Dr(ca2D, Q):
    return _opencal.calUpdateSubstate2Dr(ca2D, Q)
calUpdateSubstate2Dr = _opencal.calUpdateSubstate2Dr

def calApplyElementaryProcess2D(ca2D, elementary_process):
    return _opencal.calApplyElementaryProcess2D(ca2D, elementary_process)
calApplyElementaryProcess2D = _opencal.calApplyElementaryProcess2D

def calGlobalTransitionFunction2D(ca2D):
    return _opencal.calGlobalTransitionFunction2D(ca2D)
calGlobalTransitionFunction2D = _opencal.calGlobalTransitionFunction2D

def calUpdate2D(ca2D):
    return _opencal.calUpdate2D(ca2D)
calUpdate2D = _opencal.calUpdate2D

def calInit2Db(ca2D, Q, i, j, value):
    return _opencal.calInit2Db(ca2D, Q, i, j, value)
calInit2Db = _opencal.calInit2Db

def calInit2Di(ca2D, Q, i, j, value):
    return _opencal.calInit2Di(ca2D, Q, i, j, value)
calInit2Di = _opencal.calInit2Di

def calInit2Dr(ca2D, Q, i, j, value):
    return _opencal.calInit2Dr(ca2D, Q, i, j, value)
calInit2Dr = _opencal.calInit2Dr

def calGet2Db(ca2D, Q, i, j):
    return _opencal.calGet2Db(ca2D, Q, i, j)
calGet2Db = _opencal.calGet2Db

def calGet2Di(ca2D, Q, i, j):
    return _opencal.calGet2Di(ca2D, Q, i, j)
calGet2Di = _opencal.calGet2Di

def calGet2Dr(ca2D, Q, i, j):
    return _opencal.calGet2Dr(ca2D, Q, i, j)
calGet2Dr = _opencal.calGet2Dr

def calGetX2Db(ca2D, Q, i, j, n):
    return _opencal.calGetX2Db(ca2D, Q, i, j, n)
calGetX2Db = _opencal.calGetX2Db

def calGetX2Di(ca2D, Q, i, j, n):
    return _opencal.calGetX2Di(ca2D, Q, i, j, n)
calGetX2Di = _opencal.calGetX2Di

def calGetX2Dr(ca2D, Q, i, j, n):
    return _opencal.calGetX2Dr(ca2D, Q, i, j, n)
calGetX2Dr = _opencal.calGetX2Dr

def calSet2Db(ca2D, Q, i, j, value):
    return _opencal.calSet2Db(ca2D, Q, i, j, value)
calSet2Db = _opencal.calSet2Db

def calSet2Di(ca2D, Q, i, j, value):
    return _opencal.calSet2Di(ca2D, Q, i, j, value)
calSet2Di = _opencal.calSet2Di

def calSet2Dr(ca2D, Q, i, j, value):
    return _opencal.calSet2Dr(ca2D, Q, i, j, value)
calSet2Dr = _opencal.calSet2Dr

def calSetCurrent2Db(ca2D, Q, i, j, value):
    return _opencal.calSetCurrent2Db(ca2D, Q, i, j, value)
calSetCurrent2Db = _opencal.calSetCurrent2Db

def calSetCurrent2Di(ca2D, Q, i, j, value):
    return _opencal.calSetCurrent2Di(ca2D, Q, i, j, value)
calSetCurrent2Di = _opencal.calSetCurrent2Di

def calSetCurrent2Dr(ca2D, Q, i, j, value):
    return _opencal.calSetCurrent2Dr(ca2D, Q, i, j, value)
calSetCurrent2Dr = _opencal.calSetCurrent2Dr

def calFinalize2D(ca2D):
    return _opencal.calFinalize2D(ca2D)
calFinalize2D = _opencal.calFinalize2D
class CALRun2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CALRun2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CALRun2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ca2D"] = _opencal.CALRun2D_ca2D_set
    __swig_getmethods__["ca2D"] = _opencal.CALRun2D_ca2D_get
    if _newclass:
        ca2D = _swig_property(_opencal.CALRun2D_ca2D_get, _opencal.CALRun2D_ca2D_set)
    __swig_setmethods__["step"] = _opencal.CALRun2D_step_set
    __swig_getmethods__["step"] = _opencal.CALRun2D_step_get
    if _newclass:
        step = _swig_property(_opencal.CALRun2D_step_get, _opencal.CALRun2D_step_set)
    __swig_setmethods__["initial_step"] = _opencal.CALRun2D_initial_step_set
    __swig_getmethods__["initial_step"] = _opencal.CALRun2D_initial_step_get
    if _newclass:
        initial_step = _swig_property(_opencal.CALRun2D_initial_step_get, _opencal.CALRun2D_initial_step_set)
    __swig_setmethods__["final_step"] = _opencal.CALRun2D_final_step_set
    __swig_getmethods__["final_step"] = _opencal.CALRun2D_final_step_get
    if _newclass:
        final_step = _swig_property(_opencal.CALRun2D_final_step_get, _opencal.CALRun2D_final_step_set)
    __swig_setmethods__["UPDATE_MODE"] = _opencal.CALRun2D_UPDATE_MODE_set
    __swig_getmethods__["UPDATE_MODE"] = _opencal.CALRun2D_UPDATE_MODE_get
    if _newclass:
        UPDATE_MODE = _swig_property(_opencal.CALRun2D_UPDATE_MODE_get, _opencal.CALRun2D_UPDATE_MODE_set)
    __swig_setmethods__["init"] = _opencal.CALRun2D_init_set
    __swig_getmethods__["init"] = _opencal.CALRun2D_init_get
    if _newclass:
        init = _swig_property(_opencal.CALRun2D_init_get, _opencal.CALRun2D_init_set)
    __swig_setmethods__["globalTransition"] = _opencal.CALRun2D_globalTransition_set
    __swig_getmethods__["globalTransition"] = _opencal.CALRun2D_globalTransition_get
    if _newclass:
        globalTransition = _swig_property(_opencal.CALRun2D_globalTransition_get, _opencal.CALRun2D_globalTransition_set)
    __swig_setmethods__["steering"] = _opencal.CALRun2D_steering_set
    __swig_getmethods__["steering"] = _opencal.CALRun2D_steering_get
    if _newclass:
        steering = _swig_property(_opencal.CALRun2D_steering_get, _opencal.CALRun2D_steering_set)
    __swig_setmethods__["stopCondition"] = _opencal.CALRun2D_stopCondition_set
    __swig_getmethods__["stopCondition"] = _opencal.CALRun2D_stopCondition_get
    if _newclass:
        stopCondition = _swig_property(_opencal.CALRun2D_stopCondition_get, _opencal.CALRun2D_stopCondition_set)
    __swig_setmethods__["finalize"] = _opencal.CALRun2D_finalize_set
    __swig_getmethods__["finalize"] = _opencal.CALRun2D_finalize_get
    if _newclass:
        finalize = _swig_property(_opencal.CALRun2D_finalize_get, _opencal.CALRun2D_finalize_set)

    def __init__(self):
        this = _opencal.new_CALRun2D()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _opencal.delete_CALRun2D
    __del__ = lambda self: None
CALRun2D_swigregister = _opencal.CALRun2D_swigregister
CALRun2D_swigregister(CALRun2D)


def calRunDef2D(ca2D, initial_step, final_step, UPDATE_MODE):
    return _opencal.calRunDef2D(ca2D, initial_step, final_step, UPDATE_MODE)
calRunDef2D = _opencal.calRunDef2D

def calRunAddInitFunc2D(simulation, init):
    return _opencal.calRunAddInitFunc2D(simulation, init)
calRunAddInitFunc2D = _opencal.calRunAddInitFunc2D

def calRunAddGlobalTransitionFunc2D(simulation, globalTransition):
    return _opencal.calRunAddGlobalTransitionFunc2D(simulation, globalTransition)
calRunAddGlobalTransitionFunc2D = _opencal.calRunAddGlobalTransitionFunc2D

def calRunAddSteeringFunc2D(simulation, steering):
    return _opencal.calRunAddSteeringFunc2D(simulation, steering)
calRunAddSteeringFunc2D = _opencal.calRunAddSteeringFunc2D

def calRunAddStopConditionFunc2D(simulation, stopCondition):
    return _opencal.calRunAddStopConditionFunc2D(simulation, stopCondition)
calRunAddStopConditionFunc2D = _opencal.calRunAddStopConditionFunc2D

def calRunAddFinalizeFunc2D(simulation, finalize):
    return _opencal.calRunAddFinalizeFunc2D(simulation, finalize)
calRunAddFinalizeFunc2D = _opencal.calRunAddFinalizeFunc2D

def calRunInitSimulation2D(simulation):
    return _opencal.calRunInitSimulation2D(simulation)
calRunInitSimulation2D = _opencal.calRunInitSimulation2D

def calRunCAStep2D(simulation):
    return _opencal.calRunCAStep2D(simulation)
calRunCAStep2D = _opencal.calRunCAStep2D

def calRunFinalizeSimulation2D(simulation):
    return _opencal.calRunFinalizeSimulation2D(simulation)
calRunFinalizeSimulation2D = _opencal.calRunFinalizeSimulation2D

def calRun2D(simulation):
    return _opencal.calRun2D(simulation)
calRun2D = _opencal.calRun2D

def calRunFinalize2D(cal2DRun):
    return _opencal.calRunFinalize2D(cal2DRun)
calRunFinalize2D = _opencal.calRunFinalize2D
class ElementaryProcessFunctor2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementaryProcessFunctor2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementaryProcessFunctor2D, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ElementaryProcessFunctor2D:
            _self = None
        else:
            _self = self
        this = _opencal.new_ElementaryProcessFunctor2D(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

    def run(self, model, i, j):
        return _opencal.ElementaryProcessFunctor2D_run(self, model, i, j)

    def __call__(self, model, i, j):
        return _opencal.ElementaryProcessFunctor2D___call__(self, model, i, j)
    __swig_destroy__ = _opencal.delete_ElementaryProcessFunctor2D
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _opencal.disown_ElementaryProcessFunctor2D(self)
        return weakref_proxy(self)
ElementaryProcessFunctor2D_swigregister = _opencal.ElementaryProcessFunctor2D_swigregister
ElementaryProcessFunctor2D_swigregister(ElementaryProcessFunctor2D)

# This file is compatible with both classic and new-style classes.


